//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ec565833-335f-4d97-a4fe-914b4120a73e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2e16b10e-a4a8-490e-8387-f85bac9faa71"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Actions"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e66baf15-3a1d-4270-b96a-85546ffd96ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca6d6166-c741-4722-954e-2a0374a98c4f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""eeeea873-330c-4319-abc9-62fd3d6d7f6a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bcb2f1c1-9910-4d01-babe-29d2fe5bfb13"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""769386f5-a442-4ee6-9065-f89c8b5c4338"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6a2e8cd7-f1cf-4fa9-bf8c-94a7e06b8da5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""31971cd1-b08a-4cde-9851-79885c9859be"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cc02b132-bb15-4444-a1f0-e21719081be7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Actions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CheckForButton"",
            ""id"": ""531e95d1-b1f1-4171-9185-387f55b9790e"",
            ""actions"": [
                {
                    ""name"": ""CheckForButtonAction"",
                    ""type"": ""Button"",
                    ""id"": ""f44c52aa-1434-473a-968d-e07e5bf6babb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b6820a2f-77c3-482a-8696-2309cc8e86e4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheckForButtonAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Actions = m_Player.FindAction("Actions", throwIfNotFound: true);
        // CheckForButton
        m_CheckForButton = asset.FindActionMap("CheckForButton", throwIfNotFound: true);
        m_CheckForButton_CheckForButtonAction = m_CheckForButton.FindAction("CheckForButtonAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Actions;
    public struct PlayerActions
    {
        private @CustomInput m_Wrapper;
        public PlayerActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Actions => m_Wrapper.m_Player_Actions;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Actions.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActions;
                @Actions.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActions;
                @Actions.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActions;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Actions.started += instance.OnActions;
                @Actions.performed += instance.OnActions;
                @Actions.canceled += instance.OnActions;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // CheckForButton
    private readonly InputActionMap m_CheckForButton;
    private ICheckForButtonActions m_CheckForButtonActionsCallbackInterface;
    private readonly InputAction m_CheckForButton_CheckForButtonAction;
    public struct CheckForButtonActions
    {
        private @CustomInput m_Wrapper;
        public CheckForButtonActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CheckForButtonAction => m_Wrapper.m_CheckForButton_CheckForButtonAction;
        public InputActionMap Get() { return m_Wrapper.m_CheckForButton; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheckForButtonActions set) { return set.Get(); }
        public void SetCallbacks(ICheckForButtonActions instance)
        {
            if (m_Wrapper.m_CheckForButtonActionsCallbackInterface != null)
            {
                @CheckForButtonAction.started -= m_Wrapper.m_CheckForButtonActionsCallbackInterface.OnCheckForButtonAction;
                @CheckForButtonAction.performed -= m_Wrapper.m_CheckForButtonActionsCallbackInterface.OnCheckForButtonAction;
                @CheckForButtonAction.canceled -= m_Wrapper.m_CheckForButtonActionsCallbackInterface.OnCheckForButtonAction;
            }
            m_Wrapper.m_CheckForButtonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CheckForButtonAction.started += instance.OnCheckForButtonAction;
                @CheckForButtonAction.performed += instance.OnCheckForButtonAction;
                @CheckForButtonAction.canceled += instance.OnCheckForButtonAction;
            }
        }
    }
    public CheckForButtonActions @CheckForButton => new CheckForButtonActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnActions(InputAction.CallbackContext context);
    }
    public interface ICheckForButtonActions
    {
        void OnCheckForButtonAction(InputAction.CallbackContext context);
    }
}
